---

# Default compose file for development and production.
# Should be used directly in development.
# Automatically loads `docker-compose.override.yml` if it exists.
# No extra steps required.
# Should be used together with `docker/docker-compose.prod.yml`
# in production.

version: "3.8"
services:
  db:
    image: "postgres:14-alpine"
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - apinet
    env_file: ./config/.env

  redis:
    image: "redis:alpine"
    restart: unless-stopped
    networks:
      - apinet
    env_file: ./config/.env

  api:
    <<: &api
      # Image name is changed in production:
      image: "billing_api:dev"
      build:
        target: development_build
        context: .
        dockerfile: ./docker/django/Dockerfile
        args:
          DJANGO_ENV: development
        cache_from:
          - "billing_api:dev"
          - "billing_api:latest"
          - "*"
      volumes:
        - django-static:/var/www/django/static
      depends_on:
        - redis
        - db
      networks:
        - apinet
      env_file:
        - ./config/.env

    command: python -Wd manage.py runserver_plus 0.0.0.0:8000
#    healthcheck:
#      # We use `$$` here because:
#      # one `$` goes to shell,
#      # one `$` goes to `docker-compose.yml` escaping
#      test: |
#        /usr/bin/test $$(
#          /usr/bin/curl --fail http://localhost:8000/health/?format=json
#          --write-out "%{http_code}" --silent --output /dev/null
#        ) -eq 200
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s

  celery:
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
    command: celery -A server worker -l info
    hostname: worker_1
    volumes:
      - .:/code
    env_file:
      - ./config/.env
    networks:
      - apinet
    depends_on:
      - redis

  celery_beat:
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
    command: celery -A server beat -l INFO
    volumes:
      - .:/code
    env_file:
      - ./config/.env
    networks:
      - apinet
    depends_on:
      - redis

#  celery_flower:
#    build:
#      context: .
#      dockerfile: ./docker/django/Dockerfile
#    command: celery flower
#    volumes:
#      - .:/code
#    env_file:
#      - ./config/.env
#    networks:
#      - apinet
#    depends_on:
#      - api
#      - redis

# This task is an example of how to extend existing ones:
#   some_worker:
#     <<: *web
#     command: python manage.py worker_process

networks:
  # Network for your internals, use it by default:
  apinet:

volumes:
  pgdata:
  django-static:


#services:
#  redis:
#    image: "redis:alpine"
#    hostname: redis
#    ports:
#      - "6379:6380"
#  api:
#    build: .
#    command: python manage.py runserver_plus 0.0.0.0:8000
#    volumes:
#      - .:/usr/src/app/
#    ports:
#      - "8000:8000"
#    depends_on:
#      - redis
#  celery:
#    build: .
#    command: celery -A server worker -l info
#    volumes:
#      - .:/usr/src/app/
#    depends_on:
#      - api
#      - redis
